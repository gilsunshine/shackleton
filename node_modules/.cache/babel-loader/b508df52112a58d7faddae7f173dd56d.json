{"ast":null,"code":"import * as THREE from 'three';\nimport React from 'react';\nexport default (canvas => {\n  var scene, renderer, camera;\n  var cube;\n  let theta = 0;\n  let rot = true; //\n\n  init();\n  render();\n\n  function init() {\n    renderer = new THREE.WebGLRenderer({\n      canvas: canvas,\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n    });\n    document.body.appendChild(renderer.domElement);\n    scene = new THREE.Scene();\n    var cubeGeometry = new THREE.BoxGeometry(10, 10, 10);\n    var cubeMaterial = new THREE.MeshBasicMaterial({\n      color: 0x1ec876\n    });\n    cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n    cube.position.set(scene.position.x, scene.position.y, -200);\n    scene.add(cube);\n    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.01, 1000);\n    document.addEventListener(\"keydown\", onDocumentKeyDown, false);\n\n    function onDocumentKeyDown(event) {\n      let keyCode = event.which;\n\n      if (keyCode === 38) {\n        camera.position.z -= 10;\n      } else if (keyCode === 40) {\n        camera.position.z += 10;\n      } else if (keyCode === 39 && rot) {\n        console.log(camera.rotation.y);\n        theta += Math.PI / 8;\n        camera.rotation.y = 15 * Math.cos(theta);\n      } else if (keyCode === 37 && rot) {\n        theta -= Math.PI / 8;\n        camera.rotation.y = 15 * Math.cos(theta);\n      }\n    }\n\n    var radius = 1000;\n    var radials = 16;\n    var circles = 20;\n    var divisions = 64;\n    var polarGrid = new THREE.PolarGridHelper(radius, radials, circles, divisions);\n    polarGrid.position.set(0, -10, 0);\n    scene.add(polarGrid);\n  }\n\n  function render() {\n    requestAnimationFrame(render);\n    renderer.render(scene, camera);\n  }\n\n  return {\n    render\n  };\n});","map":{"version":3,"sources":["/Users/gils/dev/shackleton/src/SceneManager.js"],"names":["THREE","React","canvas","scene","renderer","camera","cube","theta","rot","init","render","WebGLRenderer","antialias","setSize","window","innerWidth","innerHeight","addEventListener","aspect","updateProjectionMatrix","document","body","appendChild","domElement","Scene","cubeGeometry","BoxGeometry","cubeMaterial","MeshBasicMaterial","color","Mesh","position","set","x","y","add","PerspectiveCamera","onDocumentKeyDown","event","keyCode","which","z","console","log","rotation","Math","PI","cos","radius","radials","circles","divisions","polarGrid","PolarGridHelper","requestAnimationFrame"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport React from 'react'\n\nexport default canvas => {\n\n\n  var scene, renderer, camera;\n  var cube;\n  let theta = 0;\n  let rot = true;\n\n//\n  init();\n  render();\n\n  function init()\n  {\n      renderer = new THREE.WebGLRenderer( {canvas:canvas, antialias:true} );\n\n      renderer.setSize( window.innerWidth, window.innerHeight );\n      window.addEventListener('resize', ()=>{\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        camera.aspect = window.innerWidth / window.innerHeight\n        camera.updateProjectionMatrix()\n      })\n\n      document.body.appendChild (renderer.domElement);\n\n      scene = new THREE.Scene();\n\n      var cubeGeometry = new THREE.BoxGeometry (10,10,10);\n      var cubeMaterial = new THREE.MeshBasicMaterial ({color: 0x1ec876});\n      cube = new THREE.Mesh (cubeGeometry, cubeMaterial);\n\n      cube.position.set (scene.position.x, scene.position.y, -200);\n      scene.add (cube);\n\n      camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.01, 1000 );\n\n      document.addEventListener(\"keydown\", onDocumentKeyDown, false)\n       function onDocumentKeyDown(event) {\n         let keyCode = event.which\n         if (keyCode === 38 ) {\n           camera.position.z -= 10\n         } else if (keyCode === 40) {\n           camera.position.z += 10\n         }\n         else if (keyCode === 39 && rot) {\n           console.log(camera.rotation.y)\n           theta += Math.PI / 8;\n           camera.rotation.y = 15 * Math.cos( theta );\n         }\n         else if (keyCode === 37 && rot) {\n           theta -= Math.PI / 8;\n           camera.rotation.y = 15 * Math.cos( theta );\n         }\n       }\n\n      var radius = 1000;\n      var radials = 16;\n      var circles = 20;\n      var divisions = 64;\n\n      var polarGrid = new THREE.PolarGridHelper( radius, radials, circles, divisions );\n      polarGrid.position.set(0, -10, 0);\n      scene.add( polarGrid );\n\n  }\n\n  function render()\n  {\n    requestAnimationFrame ( render );\n    renderer.render (scene, camera);\n  }\n\n    return{render}\n\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import*as THREE from'three';import React from'react';export default(function(canvas){var scene,renderer,camera;var cube;var theta=0;var rot=true;var curPos=0;var zoomLevel=0;//\ninit();render();function init(){renderer=new THREE.WebGLRenderer({canvas:canvas,antialias:true});renderer.setSize(window.innerWidth,window.innerHeight);window.addEventListener('resize',function(){renderer.setSize(window.innerWidth,window.innerHeight);camera.aspect=window.innerWidth/window.innerHeight;camera.updateProjectionMatrix();});document.body.appendChild(renderer.domElement);scene=new THREE.Scene();var cubeGeometry=new THREE.BoxGeometry(10,10,10);var cubeMaterial=new THREE.MeshBasicMaterial({color:0x1ec876});cube=new THREE.Mesh(cubeGeometry,cubeMaterial);cube.position.set(scene.position.x,scene.position.y,-200);scene.add(cube);camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.01,1000);document.addEventListener(\"keydown\",onDocumentKeyDown,false);function onDocumentKeyDown(event){var keyCode=event.which;if(keyCode===87){camera.translateZ(-10);zoomLevel+=1;if(zoomLevel===0){rot=true;}else{rot=false;}}else if(keyCode===83){if(zoomLevel>0){camera.translateZ(10);zoomLevel-=1;}if(zoomLevel===0){rot=true;}else{rot=false;}}else if(keyCode===65&&rot){camera.rotation.y+=Math.PI/8;}else if(keyCode===68&&rot){camera.rotation.y-=Math.PI/8;}}var radius=1000;var radials=16;var circles=20;var divisions=64;var polarGrid=new THREE.PolarGridHelper(radius,radials,circles,divisions);polarGrid.position.set(0,-10,0);scene.add(polarGrid);}function render(){requestAnimationFrame(render);renderer.render(scene,camera);}return{render:render};});","map":{"version":3,"sources":["/Users/gils/dev/shackleton/src/SceneManager.js"],"names":["THREE","React","canvas","scene","renderer","camera","cube","theta","rot","curPos","zoomLevel","init","render","WebGLRenderer","antialias","setSize","window","innerWidth","innerHeight","addEventListener","aspect","updateProjectionMatrix","document","body","appendChild","domElement","Scene","cubeGeometry","BoxGeometry","cubeMaterial","MeshBasicMaterial","color","Mesh","position","set","x","y","add","PerspectiveCamera","onDocumentKeyDown","event","keyCode","which","translateZ","rotation","Math","PI","radius","radials","circles","divisions","polarGrid","PolarGridHelper","requestAnimationFrame"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport React from 'react'\n\nexport default canvas => {\n\n\n  var scene, renderer, camera;\n  var cube;\n  let theta = 0;\n  let rot = true;\n  let curPos = 0;\n  let zoomLevel = 0;\n\n//\n  init();\n  render();\n\n  function init()\n  {\n      renderer = new THREE.WebGLRenderer( {canvas:canvas, antialias:true} );\n\n\n      renderer.setSize( window.innerWidth, window.innerHeight );\n      window.addEventListener('resize', ()=>{\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        camera.aspect = window.innerWidth / window.innerHeight\n        camera.updateProjectionMatrix()\n      })\n\n      document.body.appendChild (renderer.domElement);\n\n      scene = new THREE.Scene();\n\n      var cubeGeometry = new THREE.BoxGeometry (10,10,10);\n      var cubeMaterial = new THREE.MeshBasicMaterial ({color: 0x1ec876});\n      cube = new THREE.Mesh (cubeGeometry, cubeMaterial);\n\n      cube.position.set (scene.position.x, scene.position.y, -200);\n      scene.add (cube);\n\n      camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.01, 1000 );\n\n      document.addEventListener(\"keydown\", onDocumentKeyDown, false)\n       function onDocumentKeyDown(event) {\n         let keyCode = event.which\n         if (keyCode === 87) {\n           camera.translateZ(-10)\n           zoomLevel += 1;\n           if (zoomLevel === 0){\n             rot = true;\n           } else {\n             rot = false;\n           }\n         } else if (keyCode === 83) {\n           if (zoomLevel > 0){\n             camera.translateZ(10)\n             zoomLevel -=  1;\n           }\n           if (zoomLevel === 0){\n             rot = true;\n           } else {\n             rot = false;\n           }\n         }\n\n         else if (keyCode === 65 && rot) {\n           camera.rotation.y += Math.PI / 8\n         }\n         else if (keyCode === 68 && rot) {\n           camera.rotation.y -= Math.PI / 8\n         }\n       }\n\n      var radius = 1000;\n      var radials = 16;\n      var circles = 20;\n      var divisions = 64;\n\n      var polarGrid = new THREE.PolarGridHelper( radius, radials, circles, divisions);\n      polarGrid.position.set(0, -10, 0);\n      scene.add( polarGrid );\n\n  }\n\n  function render()\n  {\n    requestAnimationFrame ( render );\n    renderer.render (scene, camera);\n  }\n\n    return{render}\n\n}\n"]},"metadata":{},"sourceType":"module"}
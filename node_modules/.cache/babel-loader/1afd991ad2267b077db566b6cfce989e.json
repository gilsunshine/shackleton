{"ast":null,"code":"import * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport uuidv4 from 'uuid/v4';\nexport default (canvas => {\n  var scene, renderer, camera;\n  var cube;\n  var controls;\n  let last_known_scroll_position = 0;\n  let prev_scroll = 0;\n  let ticking = false;\n  let theta = 0;\n  let camZ = 0; //\n\n  init();\n  render();\n\n  function init() {\n    renderer = new THREE.WebGLRenderer({\n      canvas: canvas,\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n    });\n    document.body.appendChild(renderer.domElement);\n    scene = new THREE.Scene();\n    var cubeGeometry = new THREE.BoxGeometry(10, 10, 10);\n    var cubeMaterial = new THREE.MeshBasicMaterial({\n      color: 0x1ec876\n    });\n    cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n    cube.position.set(scene.position.x, scene.position.y, -200);\n    scene.add(cube);\n    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.01, 1000);\n    camera.position.z = 1000;\n    controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.2;\n    controls.minPolarAngle = Math.PI / 2; // radians\n\n    controls.maxPolarAngle = Math.PI / 2; // radians\n\n    controls.enablePan = false;\n    controls.zoomSpeed = 4; // controls.enableZoom = false;\n\n    controls.enableRotate = false; // controls.enableKeys = true;\n    // function doSomething(scroll_pos) {\n    //   console.log(\"scroll pos: \" + scroll_pos);\n    //     console.log(\"last known scroll pos: \" + prev_scroll);\n    //   if (scroll_pos > prev_scroll){\n    //     camera.position.z += 100;\n    //     console.log(\"greater\");\n    //   } else if (scroll_pos < prev_scroll){\n    //     camera.position.z -= 100;\n    //     console.log(\"les\");\n    //   }\n    //   prev_scroll = scroll_pos;\n    // }\n    //\n    // window.addEventListener('scroll', function(e) {\n    //   last_known_scroll_position = window.scrollY;\n    //\n    //   if (!ticking) {\n    //     window.requestAnimationFrame(function() {\n    //       doSomething(last_known_scroll_position);\n    //       ticking = false;\n    //     });\n    //\n    //     ticking = true;\n    //   }\n    // });\n\n    document.addEventListener(\"keydown\", onDocumentKeyDown, false);\n\n    function onDocumentKeyDown(event) {\n      let keyCode = event.which;\n\n      if (keyCode === 38) {\n        camZ += 100;\n      } else if (keyCode === 40) {\n        camZ -= 100;\n      } else if (keyCode === 39) {\n        theta += Math.PI / 8;\n      } else if (keyCode === 37) {\n        theta -= Math.PI / 8;\n      }\n    }\n\n    var radius = 1000;\n    var radials = 16;\n    var circles = 20;\n    var divisions = 64;\n    var polarGrid = new THREE.PolarGridHelper(radius, radials, circles, divisions);\n    polarGrid.position.set(0, -10, 0);\n    scene.add(polarGrid);\n  }\n\n  function render() {\n    camera.position.x = 15 * Math.cos(theta);\n    camera.position.z = 15 * Math.sin(theta) + camZ;\n    requestAnimationFrame(render);\n    controls.update();\n    renderer.render(scene, camera);\n  }\n\n  return {\n    render\n  };\n});","map":{"version":3,"sources":["/Users/gils/dev/shackleton/src/SceneManager.js"],"names":["THREE","OrbitControls","uuidv4","canvas","scene","renderer","camera","cube","controls","last_known_scroll_position","prev_scroll","ticking","theta","camZ","init","render","WebGLRenderer","antialias","setSize","window","innerWidth","innerHeight","addEventListener","aspect","updateProjectionMatrix","document","body","appendChild","domElement","Scene","cubeGeometry","BoxGeometry","cubeMaterial","MeshBasicMaterial","color","Mesh","position","set","x","y","add","PerspectiveCamera","z","enableDamping","dampingFactor","minPolarAngle","Math","PI","maxPolarAngle","enablePan","zoomSpeed","enableRotate","onDocumentKeyDown","event","keyCode","which","radius","radials","circles","divisions","polarGrid","PolarGridHelper","cos","sin","requestAnimationFrame","update"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols'\nimport uuidv4 from 'uuid/v4'\n\n\nexport default canvas => {\n\n  var scene, renderer, camera;\n  var cube;\n  var controls;\n  let last_known_scroll_position = 0;\n  let prev_scroll = 0;\n  let ticking = false;\n  let theta = 0;\n  let camZ = 0;\n//\n  init();\n  render();\n\n  function init()\n  {\n      renderer = new THREE.WebGLRenderer( {canvas:canvas, antialias:true} );\n\n      renderer.setSize( window.innerWidth, window.innerHeight );\n      window.addEventListener('resize', ()=>{\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        camera.aspect = window.innerWidth / window.innerHeight\n        camera.updateProjectionMatrix()\n      })\n\n      document.body.appendChild (renderer.domElement);\n\n      scene = new THREE.Scene();\n\n      var cubeGeometry = new THREE.BoxGeometry (10,10,10);\n      var cubeMaterial = new THREE.MeshBasicMaterial ({color: 0x1ec876});\n      cube = new THREE.Mesh (cubeGeometry, cubeMaterial);\n\n      cube.position.set (scene.position.x, scene.position.y, -200);\n      scene.add (cube);\n\n      camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.01, 1000 );\n\t\t\tcamera.position.z = 1000;\n\n\t\t\tcontrols = new OrbitControls( camera, renderer.domElement );\n\t\t\tcontrols.enableDamping = true;\n\t\t\tcontrols.dampingFactor = 0.2;\n      controls.minPolarAngle = Math.PI/2; // radians\n\t    controls.maxPolarAngle = Math.PI/2; // radians\n      controls.enablePan = false;\n      controls.zoomSpeed = 4;\n      // controls.enableZoom = false;\n      controls.enableRotate = false;\n      // controls.enableKeys = true;\n\n      // function doSomething(scroll_pos) {\n      //   console.log(\"scroll pos: \" + scroll_pos);\n      //     console.log(\"last known scroll pos: \" + prev_scroll);\n      //   if (scroll_pos > prev_scroll){\n      //     camera.position.z += 100;\n      //     console.log(\"greater\");\n      //   } else if (scroll_pos < prev_scroll){\n      //     camera.position.z -= 100;\n      //     console.log(\"les\");\n      //   }\n      //   prev_scroll = scroll_pos;\n      // }\n      //\n      // window.addEventListener('scroll', function(e) {\n      //   last_known_scroll_position = window.scrollY;\n      //\n      //   if (!ticking) {\n      //     window.requestAnimationFrame(function() {\n      //       doSomething(last_known_scroll_position);\n      //       ticking = false;\n      //     });\n      //\n      //     ticking = true;\n      //   }\n      // });\n\n      document.addEventListener(\"keydown\", onDocumentKeyDown, false)\n     function onDocumentKeyDown(event) {\n       let keyCode = event.which\n       if (keyCode === 38 ) {\n         camZ += 100;\n       } else if (keyCode === 40) {\n         camZ -=100;\n       }\n       else if (keyCode === 39) {\n         theta += Math.PI / 8;\n       }\n       else if (keyCode === 37) {\n         theta -= Math.PI / 8;\n       }\n     }\n\n      var radius = 1000;\n      var radials = 16;\n      var circles = 20;\n      var divisions = 64;\n\n      var polarGrid = new THREE.PolarGridHelper( radius, radials, circles, divisions );\n      polarGrid.position.set(0, -10, 0);\n      scene.add( polarGrid );\n\n  }\n\n\n  function render()\n  {\n    camera.position.x = 15 * Math.cos( theta );\n    camera.position.z = 15 * Math.sin( theta ) + camZ;\n    requestAnimationFrame ( render );\n    controls.update();\n    renderer.render (scene, camera);\n  }\n\n    return{render}\n\n}\n"]},"metadata":{},"sourceType":"module"}
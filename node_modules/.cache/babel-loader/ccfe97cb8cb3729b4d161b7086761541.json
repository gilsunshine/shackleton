{"ast":null,"code":"import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport uuidv4 from 'uuid/v4';\nimport React from 'react';\nexport default (canvas => {\n  var scene, renderer, camera;\n  var cube;\n  var controls;\n  let last_known_scroll_position = 0;\n  let prev_scroll = 0;\n  let ticking = false;\n  let theta = 0;\n  let camZ = 0;\n  let rot = true; //\n\n  init();\n  render();\n\n  function init() {\n    renderer = new THREE.WebGLRenderer({\n      canvas: canvas,\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n    });\n    document.body.appendChild(renderer.domElement);\n    scene = new THREE.Scene();\n    var cubeGeometry = new THREE.BoxGeometry(10, 10, 10);\n    var cubeMaterial = new THREE.MeshBasicMaterial({\n      color: 0x1ec876\n    });\n    cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n    cube.position.set(scene.position.x, scene.position.y, -200);\n    scene.add(cube);\n    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.01, 1000);\n    controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.5;\n    controls.minPolarAngle = Math.PI / 2; // radians\n\n    controls.maxPolarAngle = Math.PI / 2; // radians\n\n    controls.enablePan = false;\n    controls.enableRotate = false;\n    controls.dollyEnabled = true; //  document.addEventListener(\"keydown\", onDocumentKeyDown, false)\n    // function onDocumentKeyDown(event) {\n    //   let keyCode = event.which\n    //   if (keyCode === 38 ) {\n    //     camZ += 100;\n    //     rot = false;\n    //     console.log(camera.position.z);\n    //   } else if (keyCode === 40) {\n    //     camZ -=100;\n    //     rot = false;\n    //     console.log(camera.position.z);\n    //   }\n    //   else if (keyCode === 39 && rot) {\n    //     theta += Math.PI / 8;\n    //   }\n    //   else if (keyCode === 37 && rot) {\n    //     theta -= Math.PI / 8;\n    //   }\n    // }\n\n    controls.keys = {\n      LEFT: 37,\n      //left arrow\n      UP: 38,\n      // up arrow\n      RIGHT: 39,\n      // right arrow\n      BOTTOM: 40 // down arrow\n\n    };\n    var radius = 1000;\n    var radials = 16;\n    var circles = 20;\n    var divisions = 64;\n    var polarGrid = new THREE.PolarGridHelper(radius, radials, circles, divisions);\n    polarGrid.position.set(0, -10, 0);\n    scene.add(polarGrid);\n  }\n\n  function render() {\n    camera.position.x = 15 * Math.cos(theta);\n    camera.position.z = 15 * Math.sin(theta) + camZ;\n    requestAnimationFrame(render);\n    controls.update();\n    renderer.render(scene, camera);\n  }\n\n  return {\n    render\n  };\n});","map":{"version":3,"sources":["/Users/gils/dev/shackleton/src/SceneManager.js"],"names":["THREE","OrbitControls","uuidv4","React","canvas","scene","renderer","camera","cube","controls","last_known_scroll_position","prev_scroll","ticking","theta","camZ","rot","init","render","WebGLRenderer","antialias","setSize","window","innerWidth","innerHeight","addEventListener","aspect","updateProjectionMatrix","document","body","appendChild","domElement","Scene","cubeGeometry","BoxGeometry","cubeMaterial","MeshBasicMaterial","color","Mesh","position","set","x","y","add","PerspectiveCamera","enableDamping","dampingFactor","minPolarAngle","Math","PI","maxPolarAngle","enablePan","enableRotate","dollyEnabled","keys","LEFT","UP","RIGHT","BOTTOM","radius","radials","circles","divisions","polarGrid","PolarGridHelper","cos","z","sin","requestAnimationFrame","update"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport uuidv4 from 'uuid/v4'\nimport React from 'react'\n\nexport default canvas => {\n\n\n  var scene, renderer, camera;\n  var cube;\n  var controls;\n  let last_known_scroll_position = 0;\n  let prev_scroll = 0;\n  let ticking = false;\n  let theta = 0;\n  let camZ = 0;\n  let rot = true;\n\n//\n  init();\n  render();\n\n  function init()\n  {\n      renderer = new THREE.WebGLRenderer( {canvas:canvas, antialias:true} );\n\n      renderer.setSize( window.innerWidth, window.innerHeight );\n      window.addEventListener('resize', ()=>{\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        camera.aspect = window.innerWidth / window.innerHeight\n        camera.updateProjectionMatrix()\n      })\n\n      document.body.appendChild (renderer.domElement);\n\n      scene = new THREE.Scene();\n\n      var cubeGeometry = new THREE.BoxGeometry (10,10,10);\n      var cubeMaterial = new THREE.MeshBasicMaterial ({color: 0x1ec876});\n      cube = new THREE.Mesh (cubeGeometry, cubeMaterial);\n\n      cube.position.set (scene.position.x, scene.position.y, -200);\n      scene.add (cube);\n\n      camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.01, 1000 );\n\n\t\t\tcontrols = new OrbitControls( camera, renderer.domElement );\n\t\t\tcontrols.enableDamping = true;\n\t\t\tcontrols.dampingFactor = 0.5;\n      controls.minPolarAngle = Math.PI/2; // radians\n\t    controls.maxPolarAngle = Math.PI/2; // radians\n      controls.enablePan = false;\n      controls.enableRotate = false;\n      controls.dollyEnabled = true;\n\n     //  document.addEventListener(\"keydown\", onDocumentKeyDown, false)\n     // function onDocumentKeyDown(event) {\n     //   let keyCode = event.which\n     //   if (keyCode === 38 ) {\n     //     camZ += 100;\n     //     rot = false;\n     //     console.log(camera.position.z);\n     //   } else if (keyCode === 40) {\n     //     camZ -=100;\n     //     rot = false;\n     //     console.log(camera.position.z);\n     //   }\n     //   else if (keyCode === 39 && rot) {\n     //     theta += Math.PI / 8;\n     //   }\n     //   else if (keyCode === 37 && rot) {\n     //     theta -= Math.PI / 8;\n     //   }\n     // }\n\n     controls.keys = {\n\tLEFT: 37, //left arrow\n\tUP: 38, // up arrow\n\tRIGHT: 39, // right arrow\n\tBOTTOM: 40 // down arrow\n}\n\n      var radius = 1000;\n      var radials = 16;\n      var circles = 20;\n      var divisions = 64;\n\n      var polarGrid = new THREE.PolarGridHelper( radius, radials, circles, divisions );\n      polarGrid.position.set(0, -10, 0);\n      scene.add( polarGrid );\n\n  }\n\n\n  function render()\n  {\n    camera.position.x = 15 * Math.cos( theta );\n    camera.position.z = 15 * Math.sin( theta ) + camZ;\n    requestAnimationFrame ( render );\n    controls.update();\n    renderer.render (scene, camera);\n  }\n\n    return{render}\n\n}\n"]},"metadata":{},"sourceType":"module"}
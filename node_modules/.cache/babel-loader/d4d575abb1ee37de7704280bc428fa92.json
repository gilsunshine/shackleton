{"ast":null,"code":"import*as THREE from'three';import{OrbitControls}from'three/examples/jsm/controls/OrbitControls';import uuidv4 from'uuid/v4';import React from'react';export default(function(canvas){var scene,renderer,camera;var cube;var controls;var last_known_scroll_position=0;var prev_scroll=0;var ticking=false;var theta=0;var camZ=0;var rot=true;//\ninit();render();function init(){renderer=new THREE.WebGLRenderer({canvas:canvas,antialias:true});renderer.setSize(window.innerWidth,window.innerHeight);window.addEventListener('resize',function(){renderer.setSize(window.innerWidth,window.innerHeight);camera.aspect=window.innerWidth/window.innerHeight;camera.updateProjectionMatrix();});document.body.appendChild(renderer.domElement);scene=new THREE.Scene();var cubeGeometry=new THREE.BoxGeometry(10,10,10);var cubeMaterial=new THREE.MeshBasicMaterial({color:0x1ec876});cube=new THREE.Mesh(cubeGeometry,cubeMaterial);cube.position.set(scene.position.x,scene.position.y,-200);scene.add(cube);camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.01,1000);// controls = new OrbitControls( camera, renderer.domElement );\n// controls.enableDamping = true;\n// controls.dampingFactor = 0.5;\n// controls.minPolarAngle = Math.PI/2; // radians\n// controls.maxPolarAngle = Math.PI/2; // radians\n// controls.enablePan = false;\n// controls.enableRotate = false;\n// controls.dollyEnabled = true;\n// controls.enableZoom = false;\ndocument.addEventListener(\"keydown\",onDocumentKeyDown,false);function onDocumentKeyDown(event){var keyCode=event.which;if(keyCode===38){camera.position.z-=10;}else if(keyCode===40){camera.position.z+=10;}else if(keyCode===39){console.log(camera.rotation.y);theta+=Math.PI/8;camera.rotation.y=15*Math.cos(theta);}else if(keyCode===37){theta-=Math.PI/8;camera.rotation.y=15*Math.cos(theta);}}var radius=1000;var radials=16;var circles=20;var divisions=64;var polarGrid=new THREE.PolarGridHelper(radius,radials,circles,divisions);polarGrid.position.set(0,-10,0);scene.add(polarGrid);}function render(){requestAnimationFrame(render);renderer.render(scene,camera);}return{render:render};});","map":{"version":3,"sources":["/Users/gils/dev/shackleton/src/SceneManager.js"],"names":["THREE","OrbitControls","uuidv4","React","canvas","scene","renderer","camera","cube","controls","last_known_scroll_position","prev_scroll","ticking","theta","camZ","rot","init","render","WebGLRenderer","antialias","setSize","window","innerWidth","innerHeight","addEventListener","aspect","updateProjectionMatrix","document","body","appendChild","domElement","Scene","cubeGeometry","BoxGeometry","cubeMaterial","MeshBasicMaterial","color","Mesh","position","set","x","y","add","PerspectiveCamera","onDocumentKeyDown","event","keyCode","which","z","console","log","rotation","Math","PI","cos","radius","radials","circles","divisions","polarGrid","PolarGridHelper","requestAnimationFrame"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport uuidv4 from 'uuid/v4'\nimport React from 'react'\n\nexport default canvas => {\n\n\n  var scene, renderer, camera;\n  var cube;\n  var controls;\n  let last_known_scroll_position = 0;\n  let prev_scroll = 0;\n  let ticking = false;\n  let theta = 0;\n  let camZ = 0;\n  let rot = true;\n\n//\n  init();\n  render();\n\n  function init()\n  {\n      renderer = new THREE.WebGLRenderer( {canvas:canvas, antialias:true} );\n\n      renderer.setSize( window.innerWidth, window.innerHeight );\n      window.addEventListener('resize', ()=>{\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        camera.aspect = window.innerWidth / window.innerHeight\n        camera.updateProjectionMatrix()\n      })\n\n      document.body.appendChild (renderer.domElement);\n\n      scene = new THREE.Scene();\n\n      var cubeGeometry = new THREE.BoxGeometry (10,10,10);\n      var cubeMaterial = new THREE.MeshBasicMaterial ({color: 0x1ec876});\n      cube = new THREE.Mesh (cubeGeometry, cubeMaterial);\n\n      cube.position.set (scene.position.x, scene.position.y, -200);\n      scene.add (cube);\n\n      camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.01, 1000 );\n\n\t\t\t// controls = new OrbitControls( camera, renderer.domElement );\n\t\t\t// controls.enableDamping = true;\n\t\t\t// controls.dampingFactor = 0.5;\n      // controls.minPolarAngle = Math.PI/2; // radians\n\t    // controls.maxPolarAngle = Math.PI/2; // radians\n      // controls.enablePan = false;\n      // controls.enableRotate = false;\n      // controls.dollyEnabled = true;\n      // controls.enableZoom = false;\n\n      document.addEventListener(\"keydown\", onDocumentKeyDown, false)\n     function onDocumentKeyDown(event) {\n       let keyCode = event.which\n       if (keyCode === 38 ) {\n         camera.position.z -= 10\n       } else if (keyCode === 40) {\n         camera.position.z += 10\n       }\n       else if (keyCode === 39) {\n         console.log(camera.rotation.y)\n         theta += Math.PI / 8;\n         camera.rotation.y = 15 * Math.cos( theta );\n       }\n       else if (keyCode === 37) {\n         theta -= Math.PI / 8;\n         camera.rotation.y = 15 * Math.cos( theta );\n       }\n     }\n\n      var radius = 1000;\n      var radials = 16;\n      var circles = 20;\n      var divisions = 64;\n\n      var polarGrid = new THREE.PolarGridHelper( radius, radials, circles, divisions );\n      polarGrid.position.set(0, -10, 0);\n      scene.add( polarGrid );\n\n  }\n\n  function render()\n  {\n    requestAnimationFrame ( render );\n    renderer.render (scene, camera);\n  }\n\n    return{render}\n\n}\n"]},"metadata":{},"sourceType":"module"}
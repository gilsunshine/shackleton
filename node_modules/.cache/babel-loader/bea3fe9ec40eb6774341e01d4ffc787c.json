{"ast":null,"code":"import * as THREE from 'three';\nimport TWEEN from '@tweenjs/tween.js';\nexport default (canvas => {\n  var scene, renderer, camera;\n  var cube;\n  let rot = true;\n  let zoomLevel = 0;\n  let zoomSpeed = 20; //\n\n  init();\n  render();\n\n  function rotateAboutPoint(obj, point, axis, theta, pointIsWorld) {\n    pointIsWorld = pointIsWorld === undefined ? false : pointIsWorld;\n\n    if (pointIsWorld) {\n      obj.parent.localToWorld(obj.position); // compensate for world coordinate\n    }\n\n    obj.position.sub(point); // remove the offset\n\n    obj.position.applyAxisAngle(axis, theta); // rotate the POSITION\n\n    obj.position.add(point); // re-add the offset\n\n    if (pointIsWorld) {\n      obj.parent.worldToLocal(obj.position); // undo world coordinates compensation\n    }\n\n    obj.rotateOnAxis(axis, theta); // rotate the OBJECT\n  }\n\n  function init() {\n    renderer = new THREE.WebGLRenderer({\n      canvas: canvas,\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n    });\n    document.body.appendChild(renderer.domElement);\n    scene = new THREE.Scene();\n    var cubeGeometry = new THREE.BoxGeometry(10, 10, 10);\n    var cubeMaterial = new THREE.MeshBasicMaterial({\n      color: 0x1ec876\n    });\n    cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n    let origin = new THREE.Vector3(0, 0, 0);\n    let originAxis = new THREE.Vector3(0, 1, 0);\n    var geometry = new THREE.PlaneGeometry(5, 20, 32);\n    var material = new THREE.MeshBasicMaterial({\n      color: 0xffff00,\n      side: THREE.DoubleSide\n    });\n    var plane = new THREE.Mesh(geometry, material);\n    plane.position.set(scene.position.x, scene.position.y, -220);\n    scene.add(plane);\n    rotateAboutPoint(plane, origin, originAxis, Math.PI / 8, true);\n    cube.position.set(scene.position.x, scene.position.y, -200);\n    scene.add(cube);\n    camera = new THREE.PerspectiveCamera(65, window.innerWidth / window.innerHeight, 0.01, 1000);\n    document.addEventListener(\"keydown\", onDocumentKeyDown, false);\n\n    function onDocumentKeyDown(event) {\n      let keyCode = event.which;\n\n      if (keyCode === 87) {\n        camera.translateZ(-zoomSpeed);\n        zoomLevel += 1;\n\n        if (zoomLevel === 0) {\n          rot = true;\n        } else {\n          rot = false;\n        }\n      } else if (keyCode === 83) {\n        if (zoomLevel > 0) {\n          camera.translateZ(zoomSpeed);\n          zoomLevel -= 1;\n        }\n\n        if (zoomLevel === 0) {\n          rot = true;\n        } else {\n          rot = false;\n        }\n      } else if (keyCode === 65 && rot) {\n        camera.rotation.y += Math.PI / 8;\n      } else if (keyCode === 68 && rot) {\n        camera.rotation.y -= Math.PI / 8;\n      }\n    }\n\n    var radius = 1000;\n    var radials = 16;\n    var circles = 20;\n    var divisions = 64;\n    var polarGrid = new THREE.PolarGridHelper(radius, radials, circles, divisions);\n    polarGrid.position.set(0, -10, 0);\n    scene.add(polarGrid);\n    document.addEventListener(\"click\", returnOrigin);\n\n    function returnOrigin() {\n      camera.translateZ(zoomLevel * zoomSpeed);\n      zoomLevel = 0;\n      rot = true;\n    } //TWEEN\n    // let posX;\n    // let posY;\n    // let posZ;\n    //\n    // var from = {\n    //   x : camera.position.x,\n    //   y : camera.position.y,\n    //   z : camera.position.z\n    // };\n    //\n    // var to = {\n    //   x : posX,\n    //   y : posY,\n    //   z : posZ\n    // };\n    // var tween = new TWEEN.Tween(from)\n    // .to(to,600)\n    // .easing(TWEEN.Easing.Linear.None)\n    // .onUpdate(function () {\n    //   camera.position.set(this.x, this.y, this.z);\n    //   // camera.lookAt(new THREE.Vector3(0,0,0));\n    // })\n    // // .onComplete(function () {\n    // //   camera.lookAt(new THREE.Vector3(0,0,0));\n    // // })\n    // .start();\n\n  }\n\n  function render() {\n    TWEEN.update();\n    requestAnimationFrame(render);\n    renderer.render(scene, camera);\n  }\n\n  return {\n    render\n  };\n});","map":{"version":3,"sources":["/Users/gils/dev/shackleton/src/SceneManager.js"],"names":["THREE","TWEEN","canvas","scene","renderer","camera","cube","rot","zoomLevel","zoomSpeed","init","render","rotateAboutPoint","obj","point","axis","theta","pointIsWorld","undefined","parent","localToWorld","position","sub","applyAxisAngle","add","worldToLocal","rotateOnAxis","WebGLRenderer","antialias","setSize","window","innerWidth","innerHeight","addEventListener","aspect","updateProjectionMatrix","document","body","appendChild","domElement","Scene","cubeGeometry","BoxGeometry","cubeMaterial","MeshBasicMaterial","color","Mesh","origin","Vector3","originAxis","geometry","PlaneGeometry","material","side","DoubleSide","plane","set","x","y","Math","PI","PerspectiveCamera","onDocumentKeyDown","event","keyCode","which","translateZ","rotation","radius","radials","circles","divisions","polarGrid","PolarGridHelper","returnOrigin","update","requestAnimationFrame"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport TWEEN from '@tweenjs/tween.js'\n\nexport default canvas => {\n\n\n  var scene, renderer, camera;\n  var cube;\n  let rot = true;\n  let zoomLevel = 0;\n  let zoomSpeed = 20;\n\n//\n  init();\n  render();\n\n  function rotateAboutPoint(obj, point, axis, theta, pointIsWorld){\n    pointIsWorld = (pointIsWorld === undefined)? false : pointIsWorld;\n\n    if(pointIsWorld){\n        obj.parent.localToWorld(obj.position); // compensate for world coordinate\n    }\n\n    obj.position.sub(point); // remove the offset\n    obj.position.applyAxisAngle(axis, theta); // rotate the POSITION\n    obj.position.add(point); // re-add the offset\n\n    if(pointIsWorld){\n        obj.parent.worldToLocal(obj.position); // undo world coordinates compensation\n    }\n\n    obj.rotateOnAxis(axis, theta); // rotate the OBJECT\n}\n\n  function init()\n  {\n      renderer = new THREE.WebGLRenderer( {canvas:canvas, antialias:true} );\n\n\n      renderer.setSize( window.innerWidth, window.innerHeight );\n      window.addEventListener('resize', ()=>{\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        camera.aspect = window.innerWidth / window.innerHeight\n        camera.updateProjectionMatrix()\n      })\n\n      document.body.appendChild (renderer.domElement);\n\n      scene = new THREE.Scene();\n\n      var cubeGeometry = new THREE.BoxGeometry (10,10,10);\n      var cubeMaterial = new THREE.MeshBasicMaterial ({color: 0x1ec876});\n      cube = new THREE.Mesh (cubeGeometry, cubeMaterial);\n      let origin = new THREE.Vector3(0,0,0);\n      let originAxis = new THREE.Vector3(0,1,0);\n\n      var geometry = new THREE.PlaneGeometry( 5, 20, 32 );\n      var material = new THREE.MeshBasicMaterial( {color: 0xffff00, side: THREE.DoubleSide} );\n      var plane = new THREE.Mesh( geometry, material );\n      plane.position.set (scene.position.x, scene.position.y, -220);\n      scene.add( plane );\n      rotateAboutPoint(plane, origin, originAxis, Math.PI / 8, true);\n\n\n      cube.position.set (scene.position.x, scene.position.y, -200);\n      scene.add (cube);\n\n      camera = new THREE.PerspectiveCamera( 65, window.innerWidth / window.innerHeight, 0.01, 1000 );\n\n      document.addEventListener(\"keydown\", onDocumentKeyDown, false)\n       function onDocumentKeyDown(event) {\n         let keyCode = event.which\n         if (keyCode === 87) {\n           camera.translateZ(-zoomSpeed)\n           zoomLevel += 1;\n           if (zoomLevel === 0){\n             rot = true;\n           } else {\n             rot = false;\n           }\n         } else if (keyCode === 83) {\n           if (zoomLevel > 0){\n             camera.translateZ(zoomSpeed)\n             zoomLevel -=  1;\n           }\n           if (zoomLevel === 0){\n             rot = true;\n           } else {\n             rot = false;\n           }\n         }\n\n         else if (keyCode === 65 && rot) {\n           camera.rotation.y += Math.PI / 8\n         }\n         else if (keyCode === 68 && rot) {\n           camera.rotation.y -= Math.PI / 8\n         }\n       }\n\n      var radius = 1000;\n      var radials = 16;\n      var circles = 20;\n      var divisions = 64;\n\n      var polarGrid = new THREE.PolarGridHelper( radius, radials, circles, divisions);\n      polarGrid.position.set(0, -10, 0);\n      scene.add( polarGrid );\n\n      document.addEventListener(\"click\", returnOrigin);\n\n      function returnOrigin() {\n        camera.translateZ(zoomLevel * zoomSpeed)\n        zoomLevel = 0;\n        rot = true;\n      }\n\n      //TWEEN\n\n      // let posX;\n      // let posY;\n      // let posZ;\n      //\n      // var from = {\n      //   x : camera.position.x,\n      //   y : camera.position.y,\n      //   z : camera.position.z\n      // };\n      //\n      // var to = {\n      //   x : posX,\n      //   y : posY,\n      //   z : posZ\n      // };\n      // var tween = new TWEEN.Tween(from)\n      // .to(to,600)\n      // .easing(TWEEN.Easing.Linear.None)\n      // .onUpdate(function () {\n      //   camera.position.set(this.x, this.y, this.z);\n      //   // camera.lookAt(new THREE.Vector3(0,0,0));\n      // })\n      // // .onComplete(function () {\n      // //   camera.lookAt(new THREE.Vector3(0,0,0));\n      // // })\n      // .start();\n\n  }\n\n  function render()\n  {\n    TWEEN.update();\n    requestAnimationFrame ( render );\n    renderer.render (scene, camera);\n  }\n\n    return{render}\n\n}\n"]},"metadata":{},"sourceType":"module"}
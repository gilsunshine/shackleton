{"ast":null,"code":"import * as THREE from 'three';\nimport React from 'react';\nexport default (canvas => {\n  var scene, renderer, camera;\n  var cube;\n  let theta = 0;\n  let rot = true;\n  let curPos = 0; //\n\n  init();\n  render();\n\n  function init() {\n    renderer = new THREE.WebGLRenderer({\n      canvas: canvas,\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n    });\n    document.body.appendChild(renderer.domElement);\n    scene = new THREE.Scene();\n    var cubeGeometry = new THREE.BoxGeometry(10, 10, 10);\n    var cubeMaterial = new THREE.MeshBasicMaterial({\n      color: 0x1ec876\n    });\n    cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n    cube.position.set(scene.position.x, scene.position.y, -200);\n    scene.add(cube);\n    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.01, 1000);\n    let targetPoints = [];\n    let i = 0;\n\n    while (i < Math.PI * 2) {\n      targetPoints.push([150 * Math.cos(i), 0, 150 * Math.sin(i)]);\n      i += Math.PI / 8;\n    }\n\n    camera.lookAt(targetPoints[curPos][0], targetPoints[curPos][1], targetPoints[curPos][2]);\n    document.addEventListener(\"keydown\", onDocumentKeyDown, false);\n\n    function onDocumentKeyDown(event) {\n      let keyCode = event.which;\n\n      if (keyCode === 87) {\n        camera.position.z -= 10;\n\n        if (camera.position.z === 0) {\n          rot = true;\n        } else {\n          rot = false;\n        }\n      } else if (keyCode === 83) {\n        camera.position.z += 10;\n\n        if (camera.position.z === 0) {\n          rot = true;\n        } else {\n          rot = false;\n        }\n      } else if (keyCode === 65 && rot) {\n        if (curPos < targetPoints.length - 1) {\n          curPos += 1;\n        } else {\n          curPos = 0;\n        }\n\n        camera.lookAt(targetPoints[curPos][0], targetPoints[curPos][1], targetPoints[curPos][2]);\n      } else if (keyCode === 68 && rot) {\n        if (curPos > 0) {\n          curPos -= 1;\n        } else {\n          curPos = targetPoints.length - 1;\n        }\n\n        camera.lookAt(targetPoints[curPos][0], targetPoints[curPos][1], targetPoints[curPos][2]);\n        camera.updateProjectionMatrix();\n      }\n    }\n\n    var radius = 1000;\n    var radials = 16;\n    var circles = 20;\n    var divisions = 64;\n    var polarGrid = new THREE.PolarGridHelper(radius, radials, circles, divisions, 0xffff00, 0x0000ff);\n    polarGrid.position.set(0, -10, 0);\n    scene.add(polarGrid);\n  }\n\n  function render() {\n    console.log(camera.target);\n    requestAnimationFrame(render);\n    renderer.render(scene, camera);\n  }\n\n  return {\n    render\n  };\n});","map":{"version":3,"sources":["/Users/gils/dev/shackleton/src/SceneManager.js"],"names":["THREE","React","canvas","scene","renderer","camera","cube","theta","rot","curPos","init","render","WebGLRenderer","antialias","setSize","window","innerWidth","innerHeight","addEventListener","aspect","updateProjectionMatrix","document","body","appendChild","domElement","Scene","cubeGeometry","BoxGeometry","cubeMaterial","MeshBasicMaterial","color","Mesh","position","set","x","y","add","PerspectiveCamera","targetPoints","i","Math","PI","push","cos","sin","lookAt","onDocumentKeyDown","event","keyCode","which","z","length","radius","radials","circles","divisions","polarGrid","PolarGridHelper","console","log","target","requestAnimationFrame"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport React from 'react'\n\nexport default canvas => {\n\n\n  var scene, renderer, camera;\n  var cube;\n  let theta = 0;\n  let rot = true;\n  let curPos = 0\n\n//\n  init();\n  render();\n\n  function init()\n  {\n      renderer = new THREE.WebGLRenderer( {canvas:canvas, antialias:true} );\n\n\n      renderer.setSize( window.innerWidth, window.innerHeight );\n      window.addEventListener('resize', ()=>{\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        camera.aspect = window.innerWidth / window.innerHeight\n        camera.updateProjectionMatrix()\n      })\n\n      document.body.appendChild (renderer.domElement);\n\n      scene = new THREE.Scene();\n\n      var cubeGeometry = new THREE.BoxGeometry (10,10,10);\n      var cubeMaterial = new THREE.MeshBasicMaterial ({color: 0x1ec876});\n      cube = new THREE.Mesh (cubeGeometry, cubeMaterial);\n\n      cube.position.set (scene.position.x, scene.position.y, -200);\n      scene.add (cube);\n\n      camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.01, 1000 );\n\n      let targetPoints = [];\n\n      let i = 0;\n\n      while (i < Math.PI * 2) {\n        targetPoints.push([150 * Math.cos(i), 0, 150 * Math.sin(i)])\n        i += Math.PI / 8;\n\n      }\n      camera.lookAt(targetPoints[curPos][0] , targetPoints[curPos][1], targetPoints[curPos][2]);\n\n      document.addEventListener(\"keydown\", onDocumentKeyDown, false)\n       function onDocumentKeyDown(event) {\n         let keyCode = event.which\n         if (keyCode === 87 ) {\n           camera.position.z -= 10\n\n           if (camera.position.z === 0){\n             rot = true;\n           } else {\n             rot = false;\n           }\n         } else if (keyCode === 83) {\n           camera.position.z += 10\n           if (camera.position.z === 0){\n             rot = true;\n           } else {\n             rot = false;\n           }\n         }\n         else if (keyCode === 65 && rot) {\n           if (curPos < targetPoints.length - 1){\n             curPos += 1\n           } else {\n             curPos = 0;\n           }\n           camera.lookAt(targetPoints[curPos][0] , targetPoints[curPos][1], targetPoints[curPos][2]);\n\n         }\n         else if (keyCode === 68 && rot) {\n           if (curPos > 0){\n             curPos -= 1\n           } else {\n             curPos = targetPoints.length - 1;\n           }\n           camera.lookAt(targetPoints[curPos][0] , targetPoints[curPos][1], targetPoints[curPos][2]);\n           camera.updateProjectionMatrix();\n         }\n       }\n\n\n\n      var radius = 1000;\n      var radials = 16;\n      var circles = 20;\n      var divisions = 64;\n\n      var polarGrid = new THREE.PolarGridHelper( radius, radials, circles, divisions, 0xffff00, 0x0000ff );\n      polarGrid.position.set(0, -10, 0);\n      scene.add( polarGrid );\n\n  }\n\n  function render()\n  {\n    console.log(camera.target);\n    requestAnimationFrame ( render );\n    renderer.render (scene, camera);\n  }\n\n    return{render}\n\n}\n"]},"metadata":{},"sourceType":"module"}